basePath: /api
definitions:
  request.CategoryRequest:
    properties:
      color:
        type: string
      icon_color:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  request.CreateTransactionRequest:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      date:
        type: string
      description:
        type: string
      type:
        enum:
        - income
        - expense
        type: string
    required:
    - amount
    - category_id
    - date
    - type
    type: object
  request.LoginRequest:
    properties:
      email_or_username:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email_or_username
    - password
    type: object
  request.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    - username
    type: object
  request.UpdateCategoryRequest:
    properties:
      color:
        type: string
      icon_color:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  request.UpdateTransactionRequest:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      date:
        type: string
      description:
        type: string
      type:
        enum:
        - income
        - expense
        type: string
    required:
    - amount
    - category_id
    - date
    - type
    type: object
  response.CategoryDistribution:
    properties:
      datasets:
        items:
          properties:
            background_color:
              items:
                type: string
              type: array
            data:
              items:
                type: number
              type: array
          type: object
        type: array
      labels:
        items:
          type: string
        type: array
    type: object
  response.ChartDataset:
    properties:
      background_color:
        type: string
      border_color:
        type: string
      data:
        items:
          type: number
        type: array
      label:
        type: string
    type: object
  response.ErrorDetail:
    properties:
      field:
        type: string
      message: {}
    type: object
  response.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/response.ErrorDetail'
        type: array
      message:
        type: string
      status:
        type: boolean
    type: object
  response.Pagination:
    properties:
      current_page:
        type: integer
      item_per_page:
        type: integer
      total_items:
        type: integer
      total_page:
        type: integer
    type: object
  response.RespDashboardCharts:
    properties:
      category_distribution:
        $ref: '#/definitions/response.CategoryDistribution'
      income_vs_expense:
        $ref: '#/definitions/response.RespIncomeVsExpense'
      top_expenses:
        $ref: '#/definitions/response.TopExpenses'
    type: object
  response.RespFinancialOverview:
    properties:
      current_balance:
        type: number
      monthly_expense:
        type: number
      monthly_income:
        type: number
      total_savings:
        type: number
    type: object
  response.RespIncomeVsExpense:
    properties:
      datasets:
        items:
          $ref: '#/definitions/response.ChartDataset'
        type: array
      labels:
        items:
          type: string
        type: array
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  response.TopExpenses:
    properties:
      datasets:
        items:
          properties:
            background_color:
              type: string
            data:
              items:
                type: number
              type: array
          type: object
        type: array
      labels:
        items:
          type: string
        type: array
    type: object
  response.TransactionListResponse:
    properties:
      pagination:
        $ref: '#/definitions/response.Pagination'
      summary:
        $ref: '#/definitions/response.TransactionSummary'
      transactions:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
    type: object
  response.TransactionResponse:
    properties:
      amount:
        type: number
      category:
        type: string
      category_id:
        type: integer
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  response.TransactionSummary:
    properties:
      balance:
        type: number
      total_expense:
        type: number
      total_income:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: raflibima1106@gmail.com
    name: Rafli Bima Pratandra
  description: API for Financial Management Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Financial Management Application API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email/username and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user with name, username, email, password and confirm
        password
      parameters:
      - description: Register credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      summary: Register new user
      tags:
      - auth
  /category:
    get:
      consumes:
      - application/json
      description: Get all categories for logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create category for logged in user
      parameters:
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Create category
      tags:
      - categories
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category for logged in user
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get category by ID for logged in user
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category for logged in user
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - categories
  /dashboard/charts:
    get:
      consumes:
      - application/json
      description: Get user's dashboard charts including income vs expense, category
        distribution, and top expenses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RespDashboardCharts'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard charts data
  /dashboard/overview:
    get:
      consumes:
      - application/json
      description: Get user's financial overview including current balance, monthly
        income, monthly expense, and monthly savings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.RespFinancialOverview'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Get financial overview
      tags:
      - dashboard
  /transaction:
    get:
      consumes:
      - application/json
      description: Get all transactions with filter and pagination
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: integer
      - description: Transaction type (income/expense)
        in: query
        name: type
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TransactionListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Get all transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Get new transaction
      parameters:
      - description: Transaction data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TransactionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Get new transaction
      tags:
      - transactions
  /transaction/{id}:
    delete:
      consumes:
      - application/json
      description: Delete transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Delete transaction
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Update transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.TransactionResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Update transaction
      tags:
      - transactions
  /transaction/export:
    get:
      consumes:
      - application/json
      description: Export transactions to Excel file
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: integer
      - description: Transaction type (income/expense)
        in: query
        name: type
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Excel file download
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Export transactions to Excel
      tags:
      - transactions
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
